Exception Handling
========================================

The base class for all the exceptions raised by the RsInstrument is ``RsInstrException``. Inherited exception classes:

- ``ResourceError`` raised in the constructor by problems with initiating the instrument, for example wrong or non-existing resource name.
- ``StatusException`` raised if a command or a query generated error in the instrument's error queue.
- ``TimeoutException`` raised if a visa timeout or an opc timeout is reached.

In this example we show usage of all of them:

.. literalinclude:: Example_Exceptions.py
   :language: python
   :linenos:


Error Context Managers
""""""""""""""""""""""""""""""""""""""""""""""""""""

You have seen in the example above the usage of two error Context-managers:

	- Instrument status error Context-manager
	- VISA timeout Context-manager

Instrument error suppressor Context-manager has several other neat features:

	- It can change the VISA timeout for the commands in the context.
	- It can selectively suppress only certain instrument error codes, and for others it raises exceptions.
	- In case any other exception is raised within the context, the context-manager sets the VISA Timeout back to its original value.
	
Let us look at two examples. The following one only suppresses execution error (code -200). Since the command is misspelled, the error generated by the instrument has the code -113,'Undefined Header', and therefore
the exception is raised anyway. This way you can only suppress certain errors. The context-manager object allows for checking if some errors were suppressed, and you can also read them all out:

.. literalinclude:: Example_SuppressInstrumentErrorsSelective.py
   :language: python
   :linenos:
	
You can also change the VISA Timeout inside the context:

.. code-block:: python

    with instr.instr_err_suppressor(visa_tout_ms=500, suppress_only_codes=-300) as supp:
		response = instr.query('*IDaN?')
		
Multiple error codes to suppress you enter as an integer list:

.. code-block:: python

	with instr.instr_err_suppressor(visa_tout_ms=3000, suppress_only_codes=[-200, -300]) as supp:
		meas = instr.query('MEASurement:RESult?')
		
If you are fighting with TimeoutExceptions, you'd like to react on them with a workaround, and continue with your code further, you have to do the following steps:

	- adjust the VISA timeout to higher value to give the instrument more time, or to lower value to prevent long waiting times.
	- execute the command / query.
	- in case the timeout error occurrs, you clear the error queue to delete any 'Query Interrupted' errors.
	- change the VISA timeout back to the original value.
	
This all is what the VISA Timeout Suppressor Context-manager does:

.. literalinclude:: Example_SuppressVisaTimeoutException.py
   :language: python
   :linenos:
